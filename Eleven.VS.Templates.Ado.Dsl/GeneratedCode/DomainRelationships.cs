//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainRelationship DomainEntityHasDomainEntityProperties
	/// Embedding relationship between the Entity and EntityProperty
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d4da731a-9e2d-41ce-8fe6-bb5ab76812cf")]
	public partial class DomainEntityHasDomainEntityProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEntityHasDomainEntityProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd4da731a, 0x9e2d, 0x41ce, 0x8f, 0xe6, 0xbb, 0x5a, 0xb7, 0x68, 0x12, 0xcf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEntityHasDomainEntityProperties link in the same Partition as the given DomainEntity
		/// </summary>
		/// <param name="source">DomainEntity to use as the source of the relationship.</param>
		/// <param name="target">DomainEntityProperty to use as the target of the relationship.</param>
		public DomainEntityHasDomainEntityProperties(DomainEntity source, DomainEntityProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEntityHasDomainEntityProperties.DomainEntityDomainRoleId, source), new DslModeling::RoleAssignment(DomainEntityHasDomainEntityProperties.DomainEntityPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityHasDomainEntityProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityHasDomainEntityProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityHasDomainEntityProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityHasDomainEntityProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEntity domain role code
		
		/// <summary>
		/// DomainEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityDomainRoleId = new global::System.Guid(0xdc6d2856, 0x32c6, 0x4607, 0xbe, 0x05, 0xd2, 0x1b, 0xf3, 0x2b, 0x76, 0x40);
		
		/// <summary>
		/// DomainRole DomainEntity
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties/DomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties/DomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEntityProperties", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties/DomainEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dc6d2856-32c6-4607-be05-d21bf32b7640")]
		public virtual DomainEntity DomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntity of a DomainEntityProperty
		/// <summary>
		/// Gets DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEntity GetDomainEntity(DomainEntityProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEntityPropertyDomainRoleId) as DomainEntity;
		}
		
		/// <summary>
		/// Sets DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEntity(DomainEntityProperty element, DomainEntity newDomainEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEntityPropertyDomainRoleId, newDomainEntity);
		}
		#endregion
		#region DomainEntityProperty domain role code
		
		/// <summary>
		/// DomainEntityProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityPropertyDomainRoleId = new global::System.Guid(0x4a823774, 0x301f, 0x455e, 0x9d, 0x87, 0x6a, 0x4b, 0x31, 0xd9, 0x4d, 0xd1);
		
		/// <summary>
		/// DomainRole DomainEntityProperty
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties/DomainEntityProperty.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties/DomainEntityProperty.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEntity", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties/DomainEntityProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4a823774-301f-455e-9d87-6a4b31d94dd1")]
		public virtual DomainEntityProperty DomainEntityProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntityProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntityProperties of a DomainEntity
		/// <summary>
		/// Gets a list of DomainEntityProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEntityProperty> GetDomainEntityProperties(DomainEntity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntityProperty>, DomainEntityProperty>(element, DomainEntityDomainRoleId);
		}
		#endregion
		#region DomainEntity link accessor
		/// <summary>
		/// Get the list of DomainEntityHasDomainEntityProperties links to a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties> GetLinksToDomainEntityProperties ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity domainEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties>(domainEntityInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityDomainRoleId);
		}
		#endregion
		#region DomainEntityProperty link accessor
		/// <summary>
		/// Get the DomainEntityHasDomainEntityProperties link to a DomainEntityProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties GetLinkToDomainEntity (global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty domainEntityPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties>(domainEntityPropertyInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEntityProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEntityHasDomainEntityProperties instance accessors
		
		/// <summary>
		/// Get any DomainEntityHasDomainEntityProperties links between a given DomainEntity and a DomainEntityProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties> GetLinks( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty target )
		{
			global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties> outLinks = new global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties>();
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties link in links )
			{
				if ( target.Equals(link.DomainEntityProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEntityHasDomainEntityProperties link between a given DomainEntityand a DomainEntityProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties GetLink( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty target )
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties link in links )
			{
				if ( target.Equals(link.DomainEntityProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainRelationship DomainEntityHasPrimitiveProperties
	/// Embedding relationship between the Entity and PrimitiveProperty
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("184a183b-3a27-4fac-9390-8331728e889f")]
	public partial class DomainEntityHasPrimitiveProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEntityHasPrimitiveProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x184a183b, 0x3a27, 0x4fac, 0x93, 0x90, 0x83, 0x31, 0x72, 0x8e, 0x88, 0x9f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEntityHasPrimitiveProperties link in the same Partition as the given DomainEntity
		/// </summary>
		/// <param name="source">DomainEntity to use as the source of the relationship.</param>
		/// <param name="target">PrimitiveProperty to use as the target of the relationship.</param>
		public DomainEntityHasPrimitiveProperties(DomainEntity source, PrimitiveProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEntityHasPrimitiveProperties.DomainEntityDomainRoleId, source), new DslModeling::RoleAssignment(DomainEntityHasPrimitiveProperties.PrimitivePropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityHasPrimitiveProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityHasPrimitiveProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityHasPrimitiveProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityHasPrimitiveProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEntity domain role code
		
		/// <summary>
		/// DomainEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityDomainRoleId = new global::System.Guid(0x06a98e73, 0xbe7a, 0x4ced, 0xbb, 0x50, 0x4a, 0x05, 0x48, 0x4d, 0x70, 0x87);
		
		/// <summary>
		/// DomainRole DomainEntity
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DomainEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties/DomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties/DomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PrimitiveProperties", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties/DomainEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("06a98e73-be7a-4ced-bb50-4a05484d7087")]
		public virtual DomainEntity DomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntity of a PrimitiveProperty
		/// <summary>
		/// Gets DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEntity GetDomainEntity(PrimitiveProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PrimitivePropertyDomainRoleId) as DomainEntity;
		}
		
		/// <summary>
		/// Sets DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEntity(PrimitiveProperty element, DomainEntity newDomainEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PrimitivePropertyDomainRoleId, newDomainEntity);
		}
		#endregion
		#region PrimitiveProperty domain role code
		
		/// <summary>
		/// PrimitiveProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid PrimitivePropertyDomainRoleId = new global::System.Guid(0x90d3a0c5, 0x4edc, 0x43e4, 0xb8, 0x59, 0xbb, 0x2a, 0x48, 0x7c, 0x76, 0x5b);
		
		/// <summary>
		/// DomainRole PrimitiveProperty
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.PrimitiveProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties/PrimitiveProperty.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties/PrimitiveProperty.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEntity", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties/PrimitiveProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("90d3a0c5-4edc-43e4-b859-bb2a487c765b")]
		public virtual PrimitiveProperty PrimitiveProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PrimitiveProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, PrimitivePropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PrimitivePropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PrimitiveProperties of a DomainEntity
		/// <summary>
		/// Gets a list of PrimitiveProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PrimitiveProperty> GetPrimitiveProperties(DomainEntity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PrimitiveProperty>, PrimitiveProperty>(element, DomainEntityDomainRoleId);
		}
		#endregion
		#region DomainEntity link accessor
		/// <summary>
		/// Get the list of DomainEntityHasPrimitiveProperties links to a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties> GetLinksToPrimitiveProperties ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity domainEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties>(domainEntityInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DomainEntityDomainRoleId);
		}
		#endregion
		#region PrimitiveProperty link accessor
		/// <summary>
		/// Get the DomainEntityHasPrimitiveProperties link to a PrimitiveProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties GetLinkToDomainEntity (global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty primitivePropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties>(primitivePropertyInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.PrimitivePropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PrimitiveProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEntityHasPrimitiveProperties instance accessors
		
		/// <summary>
		/// Get any DomainEntityHasPrimitiveProperties links between a given DomainEntity and a PrimitiveProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties> GetLinks( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity source, global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty target )
		{
			global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties> outLinks = new global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties>();
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DomainEntityDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties link in links )
			{
				if ( target.Equals(link.PrimitiveProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEntityHasPrimitiveProperties link between a given DomainEntityand a PrimitiveProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties GetLink( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity source, global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty target )
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DomainEntityDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties link in links )
			{
				if ( target.Equals(link.PrimitiveProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainRelationship DomainEntityModelHasDomainEntities
	/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("76ba6679-27e3-4f6a-9e94-a2dc8bbc6f08")]
	public partial class DomainEntityModelHasDomainEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEntityModelHasDomainEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76ba6679, 0x27e3, 0x4f6a, 0x9e, 0x94, 0xa2, 0xdc, 0x8b, 0xbc, 0x6f, 0x08);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEntityModelHasDomainEntities link in the same Partition as the given DomainEntityModel
		/// </summary>
		/// <param name="source">DomainEntityModel to use as the source of the relationship.</param>
		/// <param name="target">DomainEntity to use as the target of the relationship.</param>
		public DomainEntityModelHasDomainEntities(DomainEntityModel source, DomainEntity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEntityModelHasDomainEntities.DomainEntityModelDomainRoleId, source), new DslModeling::RoleAssignment(DomainEntityModelHasDomainEntities.DomainEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityModelHasDomainEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityModelHasDomainEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityModelHasDomainEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityModelHasDomainEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEntityModel domain role code
		
		/// <summary>
		/// DomainEntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityModelDomainRoleId = new global::System.Guid(0x0ecbca83, 0xec96, 0x45da, 0x93, 0xc5, 0x76, 0x97, 0x41, 0x52, 0x44, 0xb1);
		
		/// <summary>
		/// DomainRole DomainEntityModel
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities/DomainEntityModel.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities/DomainEntityModel.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEntities", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities/DomainEntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0ecbca83-ec96-45da-93c5-7697415244b1")]
		public virtual DomainEntityModel DomainEntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntityModel of a DomainEntity
		/// <summary>
		/// Gets DomainEntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEntityModel GetDomainEntityModel(DomainEntity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEntityDomainRoleId) as DomainEntityModel;
		}
		
		/// <summary>
		/// Sets DomainEntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEntityModel(DomainEntity element, DomainEntityModel newDomainEntityModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEntityDomainRoleId, newDomainEntityModel);
		}
		#endregion
		#region DomainEntity domain role code
		
		/// <summary>
		/// DomainEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityDomainRoleId = new global::System.Guid(0x49d808ae, 0x04e5, 0x431f, 0x8d, 0xab, 0x78, 0x99, 0xdb, 0x79, 0x99, 0xb3);
		
		/// <summary>
		/// DomainRole DomainEntity
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities/DomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities/DomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEntityModel", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities/DomainEntity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("49d808ae-04e5-431f-8dab-7899db7999b3")]
		public virtual DomainEntity DomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntities of a DomainEntityModel
		/// <summary>
		/// Gets a list of DomainEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEntity> GetDomainEntities(DomainEntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntity>, DomainEntity>(element, DomainEntityModelDomainRoleId);
		}
		#endregion
		#region DomainEntityModel link accessor
		/// <summary>
		/// Get the list of DomainEntityModelHasDomainEntities links to a DomainEntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities> GetLinksToDomainEntities ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel domainEntityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities>(domainEntityModelInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityModelDomainRoleId);
		}
		#endregion
		#region DomainEntity link accessor
		/// <summary>
		/// Get the DomainEntityModelHasDomainEntities link to a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities GetLinkToDomainEntityModel (global::Eleven.VS.Templates.Ado.Dsl.DomainEntity domainEntityInstance)
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities>(domainEntityInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEntity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEntityModelHasDomainEntities instance accessors
		
		/// <summary>
		/// Get any DomainEntityModelHasDomainEntities links between a given DomainEntityModel and a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities> GetLinks( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntity target )
		{
			global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities> outLinks = new global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities>();
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityModelDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities link in links )
			{
				if ( target.Equals(link.DomainEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEntityModelHasDomainEntities link between a given DomainEntityModeland a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities GetLink( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntity target )
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityModelDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities link in links )
			{
				if ( target.Equals(link.DomainEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainRelationship DomainEntityModelHasDomainEntityCollections
	/// Description for
	/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ee0dd9de-3cfc-4e67-8a9c-aca01fdec3dc")]
	public partial class DomainEntityModelHasDomainEntityCollections : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEntityModelHasDomainEntityCollections domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee0dd9de, 0x3cfc, 0x4e67, 0x8a, 0x9c, 0xac, 0xa0, 0x1f, 0xde, 0xc3, 0xdc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEntityModelHasDomainEntityCollections link in the same Partition as the given DomainEntityModel
		/// </summary>
		/// <param name="source">DomainEntityModel to use as the source of the relationship.</param>
		/// <param name="target">DomainEntityCollection to use as the target of the relationship.</param>
		public DomainEntityModelHasDomainEntityCollections(DomainEntityModel source, DomainEntityCollection target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEntityModelHasDomainEntityCollections.DomainEntityModelDomainRoleId, source), new DslModeling::RoleAssignment(DomainEntityModelHasDomainEntityCollections.DomainEntityCollectionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityModelHasDomainEntityCollections(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityModelHasDomainEntityCollections(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityModelHasDomainEntityCollections(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityModelHasDomainEntityCollections(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEntityModel domain role code
		
		/// <summary>
		/// DomainEntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityModelDomainRoleId = new global::System.Guid(0xff61d8a9, 0x637e, 0x482f, 0xb1, 0x05, 0xa0, 0xf2, 0xb9, 0xd1, 0x96, 0x73);
		
		/// <summary>
		/// DomainRole DomainEntityModel
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections/DomainEntityModel.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections/DomainEntityModel.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEntityCollections", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections/DomainEntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ff61d8a9-637e-482f-b105-a0f2b9d19673")]
		public virtual DomainEntityModel DomainEntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntityModel of a DomainEntityCollection
		/// <summary>
		/// Gets DomainEntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEntityModel GetDomainEntityModel(DomainEntityCollection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEntityCollectionDomainRoleId) as DomainEntityModel;
		}
		
		/// <summary>
		/// Sets DomainEntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEntityModel(DomainEntityCollection element, DomainEntityModel newDomainEntityModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEntityCollectionDomainRoleId, newDomainEntityModel);
		}
		#endregion
		#region DomainEntityCollection domain role code
		
		/// <summary>
		/// DomainEntityCollection domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityCollectionDomainRoleId = new global::System.Guid(0x9ef35a72, 0x0fe3, 0x4139, 0x8d, 0x34, 0x53, 0x3f, 0x42, 0x56, 0x4c, 0x3a);
		
		/// <summary>
		/// DomainRole DomainEntityCollection
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityCollection
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections/DomainEntityCollection.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections/DomainEntityCollection.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEntityModel", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections/DomainEntityCollection.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9ef35a72-0fe3-4139-8d34-533f42564c3a")]
		public virtual DomainEntityCollection DomainEntityCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntityCollection)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityCollectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityCollectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntityCollections of a DomainEntityModel
		/// <summary>
		/// Gets a list of DomainEntityCollections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEntityCollection> GetDomainEntityCollections(DomainEntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntityCollection>, DomainEntityCollection>(element, DomainEntityModelDomainRoleId);
		}
		#endregion
		#region DomainEntityModel link accessor
		/// <summary>
		/// Get the list of DomainEntityModelHasDomainEntityCollections links to a DomainEntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections> GetLinksToDomainEntityCollections ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel domainEntityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections>(domainEntityModelInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityModelDomainRoleId);
		}
		#endregion
		#region DomainEntityCollection link accessor
		/// <summary>
		/// Get the DomainEntityModelHasDomainEntityCollections link to a DomainEntityCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections GetLinkToDomainEntityModel (global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection domainEntityCollectionInstance)
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections>(domainEntityCollectionInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityCollectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEntityCollection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEntityModelHasDomainEntityCollections instance accessors
		
		/// <summary>
		/// Get any DomainEntityModelHasDomainEntityCollections links between a given DomainEntityModel and a DomainEntityCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections> GetLinks( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection target )
		{
			global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections> outLinks = new global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections>();
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityModelDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections link in links )
			{
				if ( target.Equals(link.DomainEntityCollection) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEntityModelHasDomainEntityCollections link between a given DomainEntityModeland a DomainEntityCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections GetLink( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection target )
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityModelDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections link in links )
			{
				if ( target.Equals(link.DomainEntityCollection) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainRelationship DomainEntityReferencesTargetDomainEntities
	/// Description for
	/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("8b8ef15d-4284-446f-a59c-d32cf4d20468")]
	public partial class DomainEntityReferencesTargetDomainEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEntityReferencesTargetDomainEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b8ef15d, 0x4284, 0x446f, 0xa5, 0x9c, 0xd3, 0x2c, 0xf4, 0xd2, 0x04, 0x68);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEntityReferencesTargetDomainEntities link in the same Partition as the given DomainEntity
		/// </summary>
		/// <param name="source">DomainEntity to use as the source of the relationship.</param>
		/// <param name="target">DomainEntity to use as the target of the relationship.</param>
		public DomainEntityReferencesTargetDomainEntities(DomainEntity source, DomainEntity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEntityReferencesTargetDomainEntities.SourceDomainEntityDomainRoleId, source), new DslModeling::RoleAssignment(DomainEntityReferencesTargetDomainEntities.TargetDomainEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityReferencesTargetDomainEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityReferencesTargetDomainEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityReferencesTargetDomainEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityReferencesTargetDomainEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceDomainEntity domain role code
		
		/// <summary>
		/// SourceDomainEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainEntityDomainRoleId = new global::System.Guid(0x3ae311de, 0x9737, 0x422e, 0xbc, 0x71, 0x3b, 0x74, 0xfc, 0xc8, 0x6c, 0xcd);
		
		/// <summary>
		/// DomainRole SourceDomainEntity
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.SourceDomainEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities/SourceDomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities/SourceDomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetDomainEntities", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities/SourceDomainEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3ae311de-9737-422e-bc71-3b74fcc86ccd")]
		public virtual DomainEntity SourceDomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceDomainEntities of a DomainEntity
		/// <summary>
		/// Gets a list of SourceDomainEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEntity> GetSourceDomainEntities(DomainEntity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntity>, DomainEntity>(element, TargetDomainEntityDomainRoleId);
		}
		#endregion
		#region TargetDomainEntity domain role code
		
		/// <summary>
		/// TargetDomainEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainEntityDomainRoleId = new global::System.Guid(0x51296278, 0xb4d7, 0x4579, 0xb2, 0x2f, 0xe5, 0x42, 0xa5, 0x15, 0xee, 0x94);
		
		/// <summary>
		/// DomainRole TargetDomainEntity
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.TargetDomainEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities/TargetDomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities/TargetDomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceDomainEntities", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities/TargetDomainEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("51296278-b4d7-4579-b22f-e542a515ee94")]
		public virtual DomainEntity TargetDomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetDomainEntities of a DomainEntity
		/// <summary>
		/// Gets a list of TargetDomainEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEntity> GetTargetDomainEntities(DomainEntity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntity>, DomainEntity>(element, SourceDomainEntityDomainRoleId);
		}
		#endregion
		#region SourceDomainEntity link accessor
		/// <summary>
		/// Get the list of DomainEntityReferencesTargetDomainEntities links to a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities> GetLinksToTargetDomainEntities ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity sourceDomainEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities>(sourceDomainEntityInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.SourceDomainEntityDomainRoleId);
		}
		#endregion
		#region TargetDomainEntity link accessor
		/// <summary>
		/// Get the list of DomainEntityReferencesTargetDomainEntities links to a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities> GetLinksToSourceDomainEntities ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity targetDomainEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities>(targetDomainEntityInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.TargetDomainEntityDomainRoleId);
		}
		#endregion
		#region DomainEntityReferencesTargetDomainEntities instance accessors
		
		/// <summary>
		/// Get any DomainEntityReferencesTargetDomainEntities links between a given DomainEntity and a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities> GetLinks( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntity target )
		{
			global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities> outLinks = new global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities>();
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.SourceDomainEntityDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities link in links )
			{
				if ( target.Equals(link.TargetDomainEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainRelationship DomainEntityReferencesDomainEntityCollections
	/// Description for
	/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("29f6c5a3-5f83-4661-8437-fab3825d8d7f")]
	public partial class DomainEntityReferencesDomainEntityCollections : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEntityReferencesDomainEntityCollections domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x29f6c5a3, 0x5f83, 0x4661, 0x84, 0x37, 0xfa, 0xb3, 0x82, 0x5d, 0x8d, 0x7f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEntityReferencesDomainEntityCollections link in the same Partition as the given DomainEntity
		/// </summary>
		/// <param name="source">DomainEntity to use as the source of the relationship.</param>
		/// <param name="target">DomainEntityCollection to use as the target of the relationship.</param>
		public DomainEntityReferencesDomainEntityCollections(DomainEntity source, DomainEntityCollection target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEntityReferencesDomainEntityCollections.DomainEntityDomainRoleId, source), new DslModeling::RoleAssignment(DomainEntityReferencesDomainEntityCollections.DomainEntityCollectionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityReferencesDomainEntityCollections(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityReferencesDomainEntityCollections(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEntityReferencesDomainEntityCollections(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEntityReferencesDomainEntityCollections(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEntity domain role code
		
		/// <summary>
		/// DomainEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityDomainRoleId = new global::System.Guid(0x43a50fc8, 0x6f50, 0x4ec3, 0x86, 0x36, 0x3d, 0x2d, 0x3a, 0xaa, 0x05, 0x82);
		
		/// <summary>
		/// DomainRole DomainEntity
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections/DomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections/DomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEntityCollections", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections/DomainEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("43a50fc8-6f50-4ec3-8636-3d2d3aaa0582")]
		public virtual DomainEntity DomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntity of a DomainEntityCollection
		/// <summary>
		/// Gets DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEntity GetDomainEntity(DomainEntityCollection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEntityCollectionDomainRoleId) as DomainEntity;
		}
		
		/// <summary>
		/// Sets DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEntity(DomainEntityCollection element, DomainEntity newDomainEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEntityCollectionDomainRoleId, newDomainEntity);
		}
		#endregion
		#region DomainEntityCollection domain role code
		
		/// <summary>
		/// DomainEntityCollection domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityCollectionDomainRoleId = new global::System.Guid(0xc90a317e, 0xaf12, 0x4017, 0xba, 0xcc, 0xa2, 0xf0, 0x2f, 0x35, 0x19, 0x0d);
		
		/// <summary>
		/// DomainRole DomainEntityCollection
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityCollection
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections/DomainEntityCollection.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections/DomainEntityCollection.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEntity", PropertyDisplayNameKey="Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections/DomainEntityCollection.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c90a317e-af12-4017-bacc-a2f02f35190d")]
		public virtual DomainEntityCollection DomainEntityCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEntityCollection)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEntityCollectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEntityCollectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEntityCollections of a DomainEntity
		/// <summary>
		/// Gets a list of DomainEntityCollections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEntityCollection> GetDomainEntityCollections(DomainEntity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntityCollection>, DomainEntityCollection>(element, DomainEntityDomainRoleId);
		}
		#endregion
		#region DomainEntity link accessor
		/// <summary>
		/// Get the list of DomainEntityReferencesDomainEntityCollections links to a DomainEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections> GetLinksToDomainEntityCollections ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity domainEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections>(domainEntityInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityDomainRoleId);
		}
		#endregion
		#region DomainEntityCollection link accessor
		/// <summary>
		/// Get the DomainEntityReferencesDomainEntityCollections link to a DomainEntityCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections GetLinkToDomainEntity (global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection domainEntityCollectionInstance)
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections>(domainEntityCollectionInstance, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityCollectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEntityCollection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEntityReferencesDomainEntityCollections instance accessors
		
		/// <summary>
		/// Get any DomainEntityReferencesDomainEntityCollections links between a given DomainEntity and a DomainEntityCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections> GetLinks( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection target )
		{
			global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections> outLinks = new global::System.Collections.Generic.List<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections>();
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections link in links )
			{
				if ( target.Equals(link.DomainEntityCollection) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEntityReferencesDomainEntityCollections link between a given DomainEntityand a DomainEntityCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections GetLink( global::Eleven.VS.Templates.Ado.Dsl.DomainEntity source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection target )
		{
			global::System.Collections.Generic.IList<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections>(source, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityDomainRoleId);
			foreach ( global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections link in links )
			{
				if ( target.Equals(link.DomainEntityCollection) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
