//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainClass DomainEntityModel
	/// Root element for entity model.
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a3819a4d-3730-41cc-9ad8-a80ef0abcbf5")]
	public partial class DomainEntityModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainEntityModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa3819a4d, 0x3730, 0x41cc, 0x9a, 0xd8, 0xa8, 0x0e, 0xf0, 0xab, 0xcb, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntityModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntityModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ProjectImplementationDatabase domain property code
		
		/// <summary>
		/// ProjectImplementationDatabase domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectImplementationDatabaseDomainPropertyId = new global::System.Guid(0x9a369c21, 0x3a99, 0x4e38, 0x9c, 0xf6, 0xe9, 0xd8, 0xab, 0xd3, 0x71, 0x9a);
		
		/// <summary>
		/// Storage for ProjectImplementationDatabase
		/// </summary>
		private global::System.String projectImplementationDatabasePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectImplementationDatabase domain property.
		/// Especify the project to implement the database model.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.ProjectImplementation_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDatabase.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDatabase.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDatabase.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9a369c21-3a99-4e38-9cf6-e9d8abd3719a")]
		public global::System.String ProjectImplementationDatabase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectImplementationDatabasePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectImplementationDatabasePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityModel.ProjectImplementationDatabase domain property.
		/// </summary>
		internal sealed partial class ProjectImplementationDatabasePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityModel, global::System.String>
		{
			private ProjectImplementationDatabasePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityModel.ProjectImplementationDatabase domain property value handler.
			/// </summary>
			public static readonly ProjectImplementationDatabasePropertyHandler Instance = new ProjectImplementationDatabasePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityModel.ProjectImplementationDatabase domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectImplementationDatabaseDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectImplementationDatabasePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectImplementationDatabasePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectImplementationDataAccess domain property code
		
		/// <summary>
		/// ProjectImplementationDataAccess domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectImplementationDataAccessDomainPropertyId = new global::System.Guid(0xb6cbba90, 0x90c0, 0x4d28, 0xa0, 0x27, 0xd5, 0xcf, 0xbc, 0x2d, 0x25, 0xaf);
		
		/// <summary>
		/// Storage for ProjectImplementationDataAccess
		/// </summary>
		private global::System.String projectImplementationDataAccessPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectImplementationDataAccess domain property.
		/// Especify the project to implement the data access objects.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.ProjectImplementation_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDataAccess.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDataAccess.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDataAccess.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b6cbba90-90c0-4d28-a027-d5cfbc2d25af")]
		public global::System.String ProjectImplementationDataAccess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectImplementationDataAccessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectImplementationDataAccessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityModel.ProjectImplementationDataAccess domain property.
		/// </summary>
		internal sealed partial class ProjectImplementationDataAccessPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityModel, global::System.String>
		{
			private ProjectImplementationDataAccessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityModel.ProjectImplementationDataAccess domain property value handler.
			/// </summary>
			public static readonly ProjectImplementationDataAccessPropertyHandler Instance = new ProjectImplementationDataAccessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityModel.ProjectImplementationDataAccess domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectImplementationDataAccessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectImplementationDataAccessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectImplementationDataAccessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectImplementationEntity domain property code
		
		/// <summary>
		/// ProjectImplementationEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectImplementationEntityDomainPropertyId = new global::System.Guid(0x4d690601, 0x4bfd, 0x4fc7, 0xae, 0x22, 0xf3, 0xbb, 0x58, 0x88, 0x41, 0x5f);
		
		/// <summary>
		/// Storage for ProjectImplementationEntity
		/// </summary>
		private global::System.String projectImplementationEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectImplementationEntity domain property.
		/// Especify the project to implement the entity objects.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.ProjectImplementation_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationEntity.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4d690601-4bfd-4fc7-ae22-f3bb5888415f")]
		public global::System.String ProjectImplementationEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectImplementationEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectImplementationEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityModel.ProjectImplementationEntity domain property.
		/// </summary>
		internal sealed partial class ProjectImplementationEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityModel, global::System.String>
		{
			private ProjectImplementationEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityModel.ProjectImplementationEntity domain property value handler.
			/// </summary>
			public static readonly ProjectImplementationEntityPropertyHandler Instance = new ProjectImplementationEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityModel.ProjectImplementationEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectImplementationEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectImplementationEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectImplementationEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectImplementationDomain domain property code
		
		/// <summary>
		/// ProjectImplementationDomain domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectImplementationDomainDomainPropertyId = new global::System.Guid(0xc8619d45, 0x43a7, 0x4932, 0x8a, 0xb2, 0xc3, 0xea, 0x33, 0xd7, 0x0d, 0xc1);
		
		/// <summary>
		/// Storage for ProjectImplementationDomain
		/// </summary>
		private global::System.String projectImplementationDomainPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectImplementationDomain domain property.
		/// Especify the project to implement the domain core objects.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.ProjectImplementation_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDomain.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDomain.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDomain.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c8619d45-43a7-4932-8ab2-c3ea33d70dc1")]
		public global::System.String ProjectImplementationDomain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectImplementationDomainPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectImplementationDomainPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityModel.ProjectImplementationDomain domain property.
		/// </summary>
		internal sealed partial class ProjectImplementationDomainPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityModel, global::System.String>
		{
			private ProjectImplementationDomainPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityModel.ProjectImplementationDomain domain property value handler.
			/// </summary>
			public static readonly ProjectImplementationDomainPropertyHandler Instance = new ProjectImplementationDomainPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityModel.ProjectImplementationDomain domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectImplementationDomainDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectImplementationDomainPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectImplementationDomainPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectImplementationDataAccessCore domain property code
		
		/// <summary>
		/// ProjectImplementationDataAccessCore domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectImplementationDataAccessCoreDomainPropertyId = new global::System.Guid(0x69430aa1, 0xbd66, 0x4871, 0xbb, 0xbd, 0xb8, 0x14, 0xd0, 0xd5, 0xa1, 0x7a);
		
		/// <summary>
		/// Storage for ProjectImplementationDataAccessCore
		/// </summary>
		private global::System.String projectImplementationDataAccessCorePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectImplementationDataAccessCore domain property.
		/// Especify the project to implement the cross cutting objects.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.ProjectImplementation_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDataAccessCore.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDataAccessCore.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationDataAccessCore.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("69430aa1-bd66-4871-bbbd-b814d0d5a17a")]
		public global::System.String ProjectImplementationDataAccessCore
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectImplementationDataAccessCorePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectImplementationDataAccessCorePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityModel.ProjectImplementationDataAccessCore domain property.
		/// </summary>
		internal sealed partial class ProjectImplementationDataAccessCorePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityModel, global::System.String>
		{
			private ProjectImplementationDataAccessCorePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityModel.ProjectImplementationDataAccessCore domain property value handler.
			/// </summary>
			public static readonly ProjectImplementationDataAccessCorePropertyHandler Instance = new ProjectImplementationDataAccessCorePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityModel.ProjectImplementationDataAccessCore domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectImplementationDataAccessCoreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectImplementationDataAccessCorePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectImplementationDataAccessCorePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectImplementationWeb domain property code
		
		/// <summary>
		/// ProjectImplementationWeb domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectImplementationWebDomainPropertyId = new global::System.Guid(0x47d2c66f, 0x8f65, 0x4a92, 0x97, 0x3d, 0x61, 0xd5, 0x6f, 0xbd, 0x1b, 0xe4);
		
		/// <summary>
		/// Storage for ProjectImplementationWeb
		/// </summary>
		private global::System.String projectImplementationWebPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectImplementationWeb domain property.
		/// Especify the project to implement the web objects.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.ProjectImplementation_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationWeb.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationWeb.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityModel/ProjectImplementationWeb.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("47d2c66f-8f65-4a92-973d-61d56fbd1be4")]
		public global::System.String ProjectImplementationWeb
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectImplementationWebPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectImplementationWebPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityModel.ProjectImplementationWeb domain property.
		/// </summary>
		internal sealed partial class ProjectImplementationWebPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityModel, global::System.String>
		{
			private ProjectImplementationWebPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityModel.ProjectImplementationWeb domain property value handler.
			/// </summary>
			public static readonly ProjectImplementationWebPropertyHandler Instance = new ProjectImplementationWebPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityModel.ProjectImplementationWeb domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectImplementationWebDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectImplementationWebPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectImplementationWebPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DomainEntities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEntities.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEntity> DomainEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntity>, DomainEntity>(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityModelDomainRoleId);
			}
		}
		#endregion
		#region DomainEntityCollections opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEntityCollections.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEntityCollection> DomainEntityCollections
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntityCollection>, DomainEntityCollection>(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Eleven.VS.Templates.Ado.Dsl.DomainEntity.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Eleven.VS.Templates.Ado.Dsl.DomainEntity sourceDomainEntity1 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.DomainEntity;
			if (sourceDomainEntity1 != null)
			{
				// Create link for path DomainEntityModelHasDomainEntities.DomainEntities
				this.DomainEntities.Add(sourceDomainEntity1);

				return;
			}
				
			global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection sourceDomainEntityCollection2 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection;
			if (sourceDomainEntityCollection2 != null)
			{
				// Create link for path DomainEntityModelHasDomainEntityCollections.DomainEntityCollections
				this.DomainEntityCollections.Add(sourceDomainEntityCollection2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Eleven.VS.Templates.Ado.Dsl.DomainEntity sourceDomainEntity1 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.DomainEntity;
			if (sourceDomainEntity1 != null)
			{
				// Delete link for path DomainEntityModelHasDomainEntities.DomainEntities
				
				foreach (DslModeling::ElementLink link in global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.GetLinks((global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel)this, sourceDomainEntity1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityModelDomainRoleId, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityDomainRoleId);
				}

				return;
			}
				
			global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection sourceDomainEntityCollection2 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection;
			if (sourceDomainEntityCollection2 != null)
			{
				// Delete link for path DomainEntityModelHasDomainEntityCollections.DomainEntityCollections
				
				foreach (DslModeling::ElementLink link in global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.GetLinks((global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModel)this, sourceDomainEntityCollection2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityModelDomainRoleId, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityCollectionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainClass DomainEntity
	/// Represents a entity of the model.
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("296a1f38-1bb6-49bc-87d9-f6610808f0de")]
	public partial class DomainEntity : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x296a1f38, 0x1bb6, 0x49bc, 0x87, 0xd9, 0xf6, 0x61, 0x08, 0x08, 0xf0, 0xde);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x813b9efe, 0x841d, 0x4577, 0xac, 0xa8, 0x8f, 0x7e, 0xf5, 0x01, 0xea, 0x83);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name of the domain entity.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/Name.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/Name.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/Name.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("813b9efe-841d-4577-aca8-8f7ef501ea83")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntity, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AccessModifier domain property code
		
		/// <summary>
		/// AccessModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessModifierDomainPropertyId = new global::System.Guid(0xe5962f0d, 0x5d0c, 0x46b1, 0xb3, 0xc1, 0x55, 0x32, 0x4a, 0xcc, 0xc4, 0xf6);
		
		/// <summary>
		/// Storage for AccessModifier
		/// </summary>
		private global::System.String accessModifierPropertyStorage = "public";
		
		/// <summary>
		/// Gets or sets the value of AccessModifier domain property.
		/// Access modifier of the domain entity.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainEntity_AccessModifier_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/AccessModifier.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/AccessModifier.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/AccessModifier.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("public")]
		[DslModeling::DomainObjectId("e5962f0d-5d0c-46b1-b3c1-55324accc4f6")]
		public global::System.String AccessModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntity.AccessModifier domain property.
		/// </summary>
		internal sealed partial class AccessModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntity, global::System.String>
		{
			private AccessModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntity.AccessModifier domain property value handler.
			/// </summary>
			public static readonly AccessModifierPropertyHandler Instance = new AccessModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntity.AccessModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DomainModule domain property code
		
		/// <summary>
		/// DomainModule domain property Id.
		/// </summary>
		public static readonly global::System.Guid DomainModuleDomainPropertyId = new global::System.Guid(0xebfed910, 0xf1a8, 0x490e, 0x89, 0xc2, 0xe0, 0x0c, 0xf2, 0x14, 0x73, 0xd1);
		
		/// <summary>
		/// Storage for DomainModule
		/// </summary>
		private global::System.String domainModulePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DomainModule domain property.
		/// Domain module name of the domain entity.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DomainModule.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DomainModule.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DomainModule.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ebfed910-f1a8-490e-89c2-e00cf21473d1")]
		public global::System.String DomainModule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return domainModulePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DomainModulePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntity.DomainModule domain property.
		/// </summary>
		internal sealed partial class DomainModulePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntity, global::System.String>
		{
			private DomainModulePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntity.DomainModule domain property value handler.
			/// </summary>
			public static readonly DomainModulePropertyHandler Instance = new DomainModulePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntity.DomainModule domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DomainModuleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.domainModulePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.domainModulePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDataAccessMapping domain property code
		
		/// <summary>
		/// IsDataAccessMapping domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDataAccessMappingDomainPropertyId = new global::System.Guid(0x7bd9f3e6, 0x6b13, 0x4f07, 0x80, 0xae, 0x9c, 0x81, 0xb5, 0xdd, 0x9a, 0xfb);
		
		/// <summary>
		/// Storage for IsDataAccessMapping
		/// </summary>
		private global::System.Boolean isDataAccessMappingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDataAccessMapping domain property.
		/// Especify if the domain entity is mapping with a table in the database.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/IsDataAccessMapping.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/IsDataAccessMapping.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/IsDataAccessMapping.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("7bd9f3e6-6b13-4f07-80ae-9c81b5dd9afb")]
		public global::System.Boolean IsDataAccessMapping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDataAccessMappingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDataAccessMappingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntity.IsDataAccessMapping domain property.
		/// </summary>
		internal sealed partial class IsDataAccessMappingPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntity, global::System.Boolean>
		{
			private IsDataAccessMappingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntity.IsDataAccessMapping domain property value handler.
			/// </summary>
			public static readonly IsDataAccessMappingPropertyHandler Instance = new IsDataAccessMappingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntity.IsDataAccessMapping domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDataAccessMappingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DomainEntity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDataAccessMappingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntity element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDataAccessMappingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataAccessSchema domain property code
		
		/// <summary>
		/// DataAccessSchema domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataAccessSchemaDomainPropertyId = new global::System.Guid(0xb0a185ce, 0x2ffd, 0x459a, 0x9f, 0x31, 0x29, 0x26, 0x34, 0x0c, 0xf8, 0x6b);
		
		/// <summary>
		/// Storage for DataAccessSchema
		/// </summary>
		private global::System.String dataAccessSchemaPropertyStorage = "dbo";
		
		/// <summary>
		/// Gets or sets the value of DataAccessSchema domain property.
		/// Name of the mapping table schema for the domain entity in the database.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DataAccessSchema.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DataAccessSchema.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DataAccessSchema.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("dbo")]
		[DslModeling::DomainObjectId("b0a185ce-2ffd-459a-9f31-2926340cf86b")]
		public global::System.String DataAccessSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataAccessSchemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataAccessSchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntity.DataAccessSchema domain property.
		/// </summary>
		internal sealed partial class DataAccessSchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntity, global::System.String>
		{
			private DataAccessSchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntity.DataAccessSchema domain property value handler.
			/// </summary>
			public static readonly DataAccessSchemaPropertyHandler Instance = new DataAccessSchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntity.DataAccessSchema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataAccessSchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataAccessSchemaPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataAccessSchemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataAccessTable domain property code
		
		/// <summary>
		/// DataAccessTable domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataAccessTableDomainPropertyId = new global::System.Guid(0x3c244946, 0x70e0, 0x40a8, 0x99, 0x59, 0x9e, 0xeb, 0x13, 0x52, 0xc2, 0xa5);
		
		/// <summary>
		/// Storage for DataAccessTable
		/// </summary>
		private global::System.String dataAccessTablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DataAccessTable domain property.
		/// Name of the mapping table for domain entity in the database.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DataAccessTable.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DataAccessTable.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/DataAccessTable.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("3c244946-70e0-40a8-9959-9eeb1352c2a5")]
		public global::System.String DataAccessTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataAccessTablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataAccessTablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntity.DataAccessTable domain property.
		/// </summary>
		internal sealed partial class DataAccessTablePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntity, global::System.String>
		{
			private DataAccessTablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntity.DataAccessTable domain property value handler.
			/// </summary>
			public static readonly DataAccessTablePropertyHandler Instance = new DataAccessTablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntity.DataAccessTable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataAccessTableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataAccessTablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataAccessTablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdDomainEntity domain property code
		
		/// <summary>
		/// IdDomainEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdDomainEntityDomainPropertyId = new global::System.Guid(0x317a8bf7, 0x25f4, 0x4415, 0x9c, 0xd0, 0x32, 0x8d, 0xd0, 0x8f, 0x96, 0x6d);
		
		/// <summary>
		/// Storage for IdDomainEntity
		/// </summary>
		private global::System.String idDomainEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of IdDomainEntity domain property.
		/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntity.Id Domain Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/IdDomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntity/IdDomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("317a8bf7-25f4-4415-9cd0-328dd08f966d")]
		public global::System.String IdDomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idDomainEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdDomainEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntity.IdDomainEntity domain property.
		/// </summary>
		internal sealed partial class IdDomainEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntity, global::System.String>
		{
			private IdDomainEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntity.IdDomainEntity domain property value handler.
			/// </summary>
			public static readonly IdDomainEntityPropertyHandler Instance = new IdDomainEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntity.IdDomainEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdDomainEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idDomainEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idDomainEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DomainEntityProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEntityProperties.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEntityProperty> DomainEntityProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntityProperty>, DomainEntityProperty>(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityDomainRoleId);
			}
		}
		#endregion
		#region PrimitiveProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PrimitiveProperties.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DomainEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PrimitiveProperty> PrimitiveProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PrimitiveProperty>, PrimitiveProperty>(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DomainEntityDomainRoleId);
			}
		}
		#endregion
		#region DomainEntityModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainEntityModel.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntity
		/// </summary>
		public virtual DomainEntityModel DomainEntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityDomainRoleId) as DomainEntityModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntities.DomainEntityDomainRoleId, value);
			}
		}
		#endregion
		#region TargetDomainEntities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetDomainEntities.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.SourceDomainEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEntity> TargetDomainEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntity>, DomainEntity>(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.SourceDomainEntityDomainRoleId);
			}
		}
		#endregion
		#region SourceDomainEntities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceDomainEntities.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.TargetDomainEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEntity> SourceDomainEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntity>, DomainEntity>(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesTargetDomainEntities.TargetDomainEntityDomainRoleId);
			}
		}
		#endregion
		#region DomainEntityCollections opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEntityCollections.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEntityCollection> DomainEntityCollections
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEntityCollection>, DomainEntityCollection>(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty sourceDomainEntityProperty1 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty;
			if (sourceDomainEntityProperty1 != null)
			{
				// Create link for path DomainEntityHasDomainEntityProperties.DomainEntityProperties
				this.DomainEntityProperties.Add(sourceDomainEntityProperty1);

				return;
			}
				
			global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty sourcePrimitiveProperty2 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty;
			if (sourcePrimitiveProperty2 != null)
			{
				// Create link for path DomainEntityHasPrimitiveProperties.PrimitiveProperties
				this.PrimitiveProperties.Add(sourcePrimitiveProperty2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty sourceDomainEntityProperty1 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty;
			if (sourceDomainEntityProperty1 != null)
			{
				// Delete link for path DomainEntityHasDomainEntityProperties.DomainEntityProperties
				
				foreach (DslModeling::ElementLink link in global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.GetLinks((global::Eleven.VS.Templates.Ado.Dsl.DomainEntity)this, sourceDomainEntityProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityDomainRoleId, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityPropertyDomainRoleId);
				}

				return;
			}
				
			global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty sourcePrimitiveProperty2 = sourceElement as global::Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty;
			if (sourcePrimitiveProperty2 != null)
			{
				// Delete link for path DomainEntityHasPrimitiveProperties.PrimitiveProperties
				
				foreach (DslModeling::ElementLink link in global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.GetLinks((global::Eleven.VS.Templates.Ado.Dsl.DomainEntity)this, sourcePrimitiveProperty2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.DomainEntityDomainRoleId, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.PrimitivePropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainClass DomainEntityProperty
	/// Represents a domain entity property in the domain entity.
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("68b8fe18-3969-42a2-90c3-07be2a271782")]
	public partial class DomainEntityProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainEntityProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x68b8fe18, 0x3969, 0x42a2, 0x90, 0xc3, 0x07, 0xbe, 0x2a, 0x27, 0x17, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntityProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntityProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DomainEntityType domain property code
		
		/// <summary>
		/// DomainEntityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityTypeDomainPropertyId = new global::System.Guid(0xc8fe25a7, 0x31b2, 0x4705, 0x92, 0xb3, 0x0e, 0xe2, 0x49, 0xbf, 0x45, 0xfa);
		
		/// <summary>
		/// Storage for DomainEntityType
		/// </summary>
		private global::System.String domainEntityTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DomainEntityType domain property.
		/// Domain entity type of the domain entity property.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainEntityType_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/DomainEntityType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/DomainEntityType.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/DomainEntityType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c8fe25a7-31b2-4705-92b3-0ee249bf45fa")]
		public global::System.String DomainEntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return domainEntityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DomainEntityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.DomainEntityType domain property.
		/// </summary>
		internal sealed partial class DomainEntityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.String>
		{
			private DomainEntityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.DomainEntityType domain property value handler.
			/// </summary>
			public static readonly DomainEntityTypePropertyHandler Instance = new DomainEntityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.DomainEntityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DomainEntityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.domainEntityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.domainEntityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x7f22b108, 0xae3c, 0x4cd3, 0xbe, 0xf0, 0x70, 0x25, 0x67, 0x8e, 0x44, 0xb4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name of the domain entity property.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/Name.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/Name.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/Name.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("7f22b108-ae3c-4cd3-bef0-7025678e44b4")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CollectionType domain property code
		
		/// <summary>
		/// CollectionType domain property Id.
		/// </summary>
		public static readonly global::System.Guid CollectionTypeDomainPropertyId = new global::System.Guid(0xd527fcd9, 0x9808, 0x4aad, 0x81, 0x4f, 0x8d, 0x3a, 0xa7, 0xa6, 0xb9, 0xc2);
		
		/// <summary>
		/// Storage for CollectionType
		/// </summary>
		private global::System.String collectionTypePropertyStorage = "(none)";
		
		/// <summary>
		/// Gets or sets the value of CollectionType domain property.
		/// Collection type of the domain entity property.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainEntityProperty_CollectionType_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/CollectionType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/CollectionType.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/CollectionType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("(none)")]
		[DslModeling::DomainObjectId("d527fcd9-9808-4aad-814f-8d3aa7a6b9c2")]
		public global::System.String CollectionType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return collectionTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CollectionTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.CollectionType domain property.
		/// </summary>
		internal sealed partial class CollectionTypePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.String>
		{
			private CollectionTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.CollectionType domain property value handler.
			/// </summary>
			public static readonly CollectionTypePropertyHandler Instance = new CollectionTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.CollectionType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CollectionTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.collectionTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.collectionTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsReadOnly domain property code
		
		/// <summary>
		/// IsReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsReadOnlyDomainPropertyId = new global::System.Guid(0xdb7750ac, 0x1971, 0x4714, 0x9e, 0x44, 0xae, 0x5e, 0xe4, 0x9d, 0xf3, 0x73);
		
		/// <summary>
		/// Storage for IsReadOnly
		/// </summary>
		private global::System.Boolean isReadOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsReadOnly domain property.
		/// Especify if the domain entity property is read only.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IsReadOnly.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IsReadOnly.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IsReadOnly.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("db7750ac-1971-4714-9e44-ae5ee49df373")]
		public global::System.Boolean IsReadOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isReadOnlyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsReadOnlyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.IsReadOnly domain property.
		/// </summary>
		internal sealed partial class IsReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.Boolean>
		{
			private IsReadOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.IsReadOnly domain property value handler.
			/// </summary>
			public static readonly IsReadOnlyPropertyHandler Instance = new IsReadOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.IsReadOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsReadOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isReadOnlyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isReadOnlyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AccessModifier domain property code
		
		/// <summary>
		/// AccessModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessModifierDomainPropertyId = new global::System.Guid(0xb9698e0c, 0x4116, 0x4ae9, 0x9a, 0x21, 0x17, 0x4c, 0x78, 0xa4, 0x2a, 0x7d);
		
		/// <summary>
		/// Storage for AccessModifier
		/// </summary>
		private global::System.String accessModifierPropertyStorage = "public";
		
		/// <summary>
		/// Gets or sets the value of AccessModifier domain property.
		/// Access modifier of the domain entity property.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainEntityProperty_AccessModifier_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/AccessModifier.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/AccessModifier.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/AccessModifier.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("public")]
		[DslModeling::DomainObjectId("b9698e0c-4116-4ae9-9a21-174c78a42a7d")]
		public global::System.String AccessModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.AccessModifier domain property.
		/// </summary>
		internal sealed partial class AccessModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.String>
		{
			private AccessModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.AccessModifier domain property value handler.
			/// </summary>
			public static readonly AccessModifierPropertyHandler Instance = new AccessModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.AccessModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdDomainEntityProperty domain property code
		
		/// <summary>
		/// IdDomainEntityProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdDomainEntityPropertyDomainPropertyId = new global::System.Guid(0x2e2af013, 0xe662, 0x40ea, 0x97, 0x88, 0x0f, 0x9d, 0x5c, 0x60, 0x59, 0x93);
		
		/// <summary>
		/// Storage for IdDomainEntityProperty
		/// </summary>
		private global::System.String idDomainEntityPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of IdDomainEntityProperty domain property.
		/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.Id Domain
		/// Entity Property
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IdDomainEntityProperty.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IdDomainEntityProperty.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("2e2af013-e662-40ea-9788-0f9d5c605993")]
		public global::System.String IdDomainEntityProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idDomainEntityPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdDomainEntityPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.IdDomainEntityProperty domain property.
		/// </summary>
		internal sealed partial class IdDomainEntityPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.String>
		{
			private IdDomainEntityPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.IdDomainEntityProperty domain property value handler.
			/// </summary>
			public static readonly IdDomainEntityPropertyPropertyHandler Instance = new IdDomainEntityPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.IdDomainEntityProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdDomainEntityPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idDomainEntityPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idDomainEntityPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdDomainEntityReferencesTargetDomainEntities domain property code
		
		/// <summary>
		/// IdDomainEntityReferencesTargetDomainEntities domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdDomainEntityReferencesTargetDomainEntitiesDomainPropertyId = new global::System.Guid(0x06103cf2, 0x8372, 0x4a2e, 0xaf, 0x0f, 0xc9, 0x27, 0xb5, 0x72, 0x69, 0xdc);
		
		/// <summary>
		/// Storage for IdDomainEntityReferencesTargetDomainEntities
		/// </summary>
		private global::System.String idDomainEntityReferencesTargetDomainEntitiesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of IdDomainEntityReferencesTargetDomainEntities domain property.
		/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.Id Domain
		/// Entity References Target Domain Entities
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IdDomainEntityReferencesTargetDomainEntities.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IdDomainEntityReferencesTargetDomainEntities.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("06103cf2-8372-4a2e-af0f-c927b57269dc")]
		public global::System.String IdDomainEntityReferencesTargetDomainEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idDomainEntityReferencesTargetDomainEntitiesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdDomainEntityReferencesTargetDomainEntitiesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.IdDomainEntityReferencesTargetDomainEntities domain property.
		/// </summary>
		internal sealed partial class IdDomainEntityReferencesTargetDomainEntitiesPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.String>
		{
			private IdDomainEntityReferencesTargetDomainEntitiesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.IdDomainEntityReferencesTargetDomainEntities domain property value handler.
			/// </summary>
			public static readonly IdDomainEntityReferencesTargetDomainEntitiesPropertyHandler Instance = new IdDomainEntityReferencesTargetDomainEntitiesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.IdDomainEntityReferencesTargetDomainEntities domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdDomainEntityReferencesTargetDomainEntitiesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idDomainEntityReferencesTargetDomainEntitiesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idDomainEntityReferencesTargetDomainEntitiesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdDomainEntity domain property code
		
		/// <summary>
		/// IdDomainEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdDomainEntityDomainPropertyId = new global::System.Guid(0x47b89539, 0x1f02, 0x4e2c, 0xae, 0x63, 0x7c, 0x5a, 0xf5, 0xe4, 0x6f, 0xcc);
		
		/// <summary>
		/// Storage for IdDomainEntity
		/// </summary>
		private global::System.String idDomainEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of IdDomainEntity domain property.
		/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.Id Domain
		/// Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IdDomainEntity.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IdDomainEntity.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("47b89539-1f02-4e2c-ae63-7c5af5e46fcc")]
		public global::System.String IdDomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idDomainEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdDomainEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.IdDomainEntity domain property.
		/// </summary>
		internal sealed partial class IdDomainEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.String>
		{
			private IdDomainEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.IdDomainEntity domain property value handler.
			/// </summary>
			public static readonly IdDomainEntityPropertyHandler Instance = new IdDomainEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.IdDomainEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdDomainEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idDomainEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idDomainEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsGeneratedCollection domain property code
		
		/// <summary>
		/// IsGeneratedCollection domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedCollectionDomainPropertyId = new global::System.Guid(0x44f856f6, 0x855b, 0x4061, 0xa0, 0xb4, 0x20, 0xc8, 0x87, 0xac, 0x10, 0x33);
		
		/// <summary>
		/// Storage for IsGeneratedCollection
		/// </summary>
		private global::System.Boolean isGeneratedCollectionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsGeneratedCollection domain property.
		/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.Is Generated
		/// Collection
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IsGeneratedCollection.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/IsGeneratedCollection.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("44f856f6-855b-4061-a0b4-20c887ac1033")]
		public global::System.Boolean IsGeneratedCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedCollectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedCollectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.IsGeneratedCollection domain property.
		/// </summary>
		internal sealed partial class IsGeneratedCollectionPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.Boolean>
		{
			private IsGeneratedCollectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.IsGeneratedCollection domain property value handler.
			/// </summary>
			public static readonly IsGeneratedCollectionPropertyHandler Instance = new IsGeneratedCollectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.IsGeneratedCollection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedCollectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isGeneratedCollectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedCollectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region HasDomainType domain property code
		
		/// <summary>
		/// HasDomainType domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasDomainTypeDomainPropertyId = new global::System.Guid(0xc2315ba7, 0xca91, 0x4731, 0x83, 0xe0, 0xec, 0x79, 0x25, 0xf4, 0x52, 0x2f);
		
		/// <summary>
		/// Storage for HasDomainType
		/// </summary>
		private global::System.Boolean hasDomainTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HasDomainType domain property.
		/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty.Has Domain Type
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/HasDomainType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityProperty/HasDomainType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("c2315ba7-ca91-4731-83e0-ec7925f4522f")]
		public global::System.Boolean HasDomainType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasDomainTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasDomainTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityProperty.HasDomainType domain property.
		/// </summary>
		internal sealed partial class HasDomainTypePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityProperty, global::System.Boolean>
		{
			private HasDomainTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityProperty.HasDomainType domain property value handler.
			/// </summary>
			public static readonly HasDomainTypePropertyHandler Instance = new HasDomainTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityProperty.HasDomainType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasDomainTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DomainEntityProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasDomainTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasDomainTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DomainEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainEntity.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityProperty
		/// </summary>
		public virtual DomainEntity DomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityPropertyDomainRoleId) as DomainEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasDomainEntityProperties.DomainEntityPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainClass PrimitiveProperty
	/// Represents a primitive property in the domain entity.
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("81166c75-9748-4996-a799-cf945b3321d8")]
	public partial class PrimitiveProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PrimitiveProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x81166c75, 0x9748, 0x4996, 0xa7, 0x99, 0xcf, 0x94, 0x5b, 0x33, 0x21, 0xd8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PrimitiveProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PrimitiveProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AccessModifier domain property code
		
		/// <summary>
		/// AccessModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessModifierDomainPropertyId = new global::System.Guid(0x2930964e, 0xacbb, 0x4577, 0x83, 0x78, 0x12, 0x1f, 0x40, 0x07, 0x1d, 0x1d);
		
		/// <summary>
		/// Storage for AccessModifier
		/// </summary>
		private global::System.String accessModifierPropertyStorage = "public";
		
		/// <summary>
		/// Gets or sets the value of AccessModifier domain property.
		/// Access modifier of the primitive property.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainPrimitiveProperty_AccessModifier_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/AccessModifier.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/AccessModifier.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/AccessModifier.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("public")]
		[DslModeling::DomainObjectId("2930964e-acbb-4577-8378-121f40071d1d")]
		public global::System.String AccessModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.AccessModifier domain property.
		/// </summary>
		internal sealed partial class AccessModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.String>
		{
			private AccessModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.AccessModifier domain property value handler.
			/// </summary>
			public static readonly AccessModifierPropertyHandler Instance = new AccessModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.AccessModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PrimitiveType domain property code
		
		/// <summary>
		/// PrimitiveType domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrimitiveTypeDomainPropertyId = new global::System.Guid(0x2c35e8c4, 0x9590, 0x467e, 0xa4, 0x30, 0x97, 0xe2, 0x08, 0x1b, 0x2e, 0x19);
		
		/// <summary>
		/// Storage for PrimitiveType
		/// </summary>
		private global::System.String primitiveTypePropertyStorage = "System.String";
		
		/// <summary>
		/// Gets or sets the value of PrimitiveType domain property.
		/// The primitive type of the primitive property.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.PrimitivePropertySystemType_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/PrimitiveType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/PrimitiveType.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/PrimitiveType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("System.String")]
		[DslModeling::DomainObjectId("2c35e8c4-9590-467e-a430-97e2081b2e19")]
		public global::System.String PrimitiveType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return primitiveTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrimitiveTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.PrimitiveType domain property.
		/// </summary>
		internal sealed partial class PrimitiveTypePropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.String>
		{
			private PrimitiveTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.PrimitiveType domain property value handler.
			/// </summary>
			public static readonly PrimitiveTypePropertyHandler Instance = new PrimitiveTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.PrimitiveType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrimitiveTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.primitiveTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.primitiveTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x586740d9, 0x771d, 0x491f, 0x89, 0xfd, 0xa5, 0xb8, 0x13, 0x5b, 0xef, 0xf3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name of the primitive property.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/Name.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/Name.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/Name.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("586740d9-771d-491f-89fd-a5b8135beff3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CollectionType domain property code
		
		/// <summary>
		/// CollectionType domain property Id.
		/// </summary>
		public static readonly global::System.Guid CollectionTypeDomainPropertyId = new global::System.Guid(0x06801040, 0x1196, 0x42c7, 0x84, 0xe6, 0x69, 0xa3, 0xe9, 0x02, 0x11, 0x05);
		
		/// <summary>
		/// Storage for CollectionType
		/// </summary>
		private global::System.String collectionTypePropertyStorage = "(none)";
		
		/// <summary>
		/// Gets or sets the value of CollectionType domain property.
		/// Collection type of the primitive property.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainPrimitiveProperty_CollectionType_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/CollectionType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/CollectionType.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/CollectionType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("(none)")]
		[DslModeling::DomainObjectId("06801040-1196-42c7-84e6-69a3e9021105")]
		public global::System.String CollectionType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return collectionTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CollectionTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.CollectionType domain property.
		/// </summary>
		internal sealed partial class CollectionTypePropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.String>
		{
			private CollectionTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.CollectionType domain property value handler.
			/// </summary>
			public static readonly CollectionTypePropertyHandler Instance = new CollectionTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.CollectionType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CollectionTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.collectionTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.collectionTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsReadOnly domain property code
		
		/// <summary>
		/// IsReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsReadOnlyDomainPropertyId = new global::System.Guid(0xff3f60bd, 0xea60, 0x4788, 0x84, 0x53, 0xd1, 0xf5, 0x02, 0xdc, 0x44, 0x39);
		
		/// <summary>
		/// Storage for IsReadOnly
		/// </summary>
		private global::System.Boolean isReadOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsReadOnly domain property.
		/// Especify if the primitive property is read only.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsReadOnly.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsReadOnly.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsReadOnly.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ff3f60bd-ea60-4788-8453-d1f502dc4439")]
		public global::System.Boolean IsReadOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isReadOnlyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsReadOnlyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.IsReadOnly domain property.
		/// </summary>
		internal sealed partial class IsReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.Boolean>
		{
			private IsReadOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.IsReadOnly domain property value handler.
			/// </summary>
			public static readonly IsReadOnlyPropertyHandler Instance = new IsReadOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.IsReadOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsReadOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isReadOnlyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isReadOnlyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDataAccessMapping domain property code
		
		/// <summary>
		/// IsDataAccessMapping domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDataAccessMappingDomainPropertyId = new global::System.Guid(0x827e37b6, 0x5576, 0x4d58, 0x8b, 0x1a, 0x9a, 0xae, 0x86, 0x2e, 0x6d, 0x21);
		
		/// <summary>
		/// Storage for IsDataAccessMapping
		/// </summary>
		private global::System.Boolean isDataAccessMappingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDataAccessMapping domain property.
		/// Especify if the primitive property is mapping with a column table in the
		/// database.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsDataAccessMapping.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsDataAccessMapping.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsDataAccessMapping.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("827e37b6-5576-4d58-8b1a-9aae862e6d21")]
		public global::System.Boolean IsDataAccessMapping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDataAccessMappingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDataAccessMappingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.IsDataAccessMapping domain property.
		/// </summary>
		internal sealed partial class IsDataAccessMappingPropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.Boolean>
		{
			private IsDataAccessMappingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.IsDataAccessMapping domain property value handler.
			/// </summary>
			public static readonly IsDataAccessMappingPropertyHandler Instance = new IsDataAccessMappingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.IsDataAccessMapping domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDataAccessMappingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDataAccessMappingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDataAccessMappingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataAccessColumn domain property code
		
		/// <summary>
		/// DataAccessColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataAccessColumnDomainPropertyId = new global::System.Guid(0xd8768b98, 0x550a, 0x424e, 0xa6, 0x95, 0xbd, 0x41, 0x6f, 0x05, 0x95, 0x77);
		
		/// <summary>
		/// Storage for DataAccessColumn
		/// </summary>
		private global::System.String dataAccessColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DataAccessColumn domain property.
		/// Name of the mapping column table for the primitive property in the database.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/DataAccessColumn.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/DataAccessColumn.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/DataAccessColumn.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d8768b98-550a-424e-a695-bd416f059577")]
		public global::System.String DataAccessColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataAccessColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataAccessColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.DataAccessColumn domain property.
		/// </summary>
		internal sealed partial class DataAccessColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.String>
		{
			private DataAccessColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.DataAccessColumn domain property value handler.
			/// </summary>
			public static readonly DataAccessColumnPropertyHandler Instance = new DataAccessColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.DataAccessColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataAccessColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataAccessColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataAccessColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataAccessType domain property code
		
		/// <summary>
		/// DataAccessType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataAccessTypeDomainPropertyId = new global::System.Guid(0xafe6f0cd, 0xf088, 0x48c2, 0xbc, 0xca, 0x6b, 0x30, 0x36, 0x29, 0x2a, 0x83);
		
		/// <summary>
		/// Storage for DataAccessType
		/// </summary>
		private global::System.String dataAccessTypePropertyStorage = "varchar(25)";
		
		/// <summary>
		/// Gets or sets the value of DataAccessType domain property.
		/// Data type of the mapping column table for the primitive property in the
		/// database.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/DataAccessType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/DataAccessType.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/DataAccessType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("varchar(25)")]
		[DslModeling::DomainObjectId("afe6f0cd-f088-48c2-bcca-6b3036292a83")]
		public global::System.String DataAccessType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataAccessTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataAccessTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.DataAccessType domain property.
		/// </summary>
		internal sealed partial class DataAccessTypePropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.String>
		{
			private DataAccessTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.DataAccessType domain property value handler.
			/// </summary>
			public static readonly DataAccessTypePropertyHandler Instance = new DataAccessTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.DataAccessType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataAccessTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataAccessTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataAccessTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPrimaryKey domain property code
		
		/// <summary>
		/// IsPrimaryKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryKeyDomainPropertyId = new global::System.Guid(0x23d2d6a9, 0x7ace, 0x4275, 0x83, 0x16, 0x00, 0xc5, 0xca, 0x86, 0x85, 0x39);
		
		/// <summary>
		/// Storage for IsPrimaryKey
		/// </summary>
		private global::System.Boolean isPrimaryKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryKey domain property.
		/// Indicate if the the mapping column table for the primitive property in the
		/// database is the primary key.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsPrimaryKey.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsPrimaryKey.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.PrimitiveProperty/IsPrimaryKey.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("23d2d6a9-7ace-4275-8316-00c5ca868539")]
		public global::System.Boolean IsPrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveProperty.IsPrimaryKey domain property.
		/// </summary>
		internal sealed partial class IsPrimaryKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveProperty, global::System.Boolean>
		{
			private IsPrimaryKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveProperty.IsPrimaryKey domain property value handler.
			/// </summary>
			public static readonly IsPrimaryKeyPropertyHandler Instance = new IsPrimaryKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveProperty.IsPrimaryKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PrimitiveProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPrimaryKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DomainEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainEntity.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.PrimitiveProperty
		/// </summary>
		public virtual DomainEntity DomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.PrimitivePropertyDomainRoleId) as DomainEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityHasPrimitiveProperties.PrimitivePropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Eleven.VS.Templates.Ado.Dsl
{
	/// <summary>
	/// DomainClass DomainEntityCollection
	/// Represents a entity collection in the model.
	/// </summary>
	[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("055df133-310d-49c1-add5-1a9f01013fac")]
	public partial class DomainEntityCollection : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainEntityCollection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x055df133, 0x310d, 0x49c1, 0xad, 0xd5, 0x1a, 0x9f, 0x01, 0x01, 0x3f, 0xac);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntityCollection(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEntityCollection(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DomainModule domain property code
		
		/// <summary>
		/// DomainModule domain property Id.
		/// </summary>
		public static readonly global::System.Guid DomainModuleDomainPropertyId = new global::System.Guid(0xcf10e872, 0xf458, 0x4760, 0xa8, 0x84, 0xa3, 0xe1, 0x0e, 0xa5, 0x17, 0x50);
		
		/// <summary>
		/// Storage for DomainModule
		/// </summary>
		private global::System.String domainModulePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DomainModule domain property.
		/// Domain module name of the entity collection.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/DomainModule.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/DomainModule.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/DomainModule.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cf10e872-f458-4760-a884-a3e10ea51750")]
		public global::System.String DomainModule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return domainModulePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DomainModulePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityCollection.DomainModule domain property.
		/// </summary>
		internal sealed partial class DomainModulePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityCollection, global::System.String>
		{
			private DomainModulePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityCollection.DomainModule domain property value handler.
			/// </summary>
			public static readonly DomainModulePropertyHandler Instance = new DomainModulePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityCollection.DomainModule domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DomainModuleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.domainModulePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.domainModulePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AccessModifier domain property code
		
		/// <summary>
		/// AccessModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessModifierDomainPropertyId = new global::System.Guid(0xd9510a5f, 0x11d0, 0x45bf, 0xac, 0x04, 0x2c, 0x05, 0x9a, 0x6f, 0x76, 0x98);
		
		/// <summary>
		/// Storage for AccessModifier
		/// </summary>
		private global::System.String accessModifierPropertyStorage = "public";
		
		/// <summary>
		/// Gets or sets the value of AccessModifier domain property.
		/// Access modifier of the domain entity collection.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainEntityCollection_AccessModifier_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/AccessModifier.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/AccessModifier.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/AccessModifier.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("public")]
		[DslModeling::DomainObjectId("d9510a5f-11d0-45bf-ac04-2c059a6f7698")]
		public global::System.String AccessModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityCollection.AccessModifier domain property.
		/// </summary>
		internal sealed partial class AccessModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityCollection, global::System.String>
		{
			private AccessModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityCollection.AccessModifier domain property value handler.
			/// </summary>
			public static readonly AccessModifierPropertyHandler Instance = new AccessModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityCollection.AccessModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0d7a178a, 0xc9cb, 0x4dac, 0xa5, 0x01, 0xb5, 0xd4, 0x92, 0x47, 0x9c, 0x5f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name of the domain entity collection.
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/Name.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/Name.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/Name.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("0d7a178a-c9cb-4dac-a501-b5d492479c5f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityCollection.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityCollection, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityCollection.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityCollection.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CollectionType domain property code
		
		/// <summary>
		/// CollectionType domain property Id.
		/// </summary>
		public static readonly global::System.Guid CollectionTypeDomainPropertyId = new global::System.Guid(0x21cd8b6a, 0x768b, 0x4eb3, 0xa1, 0xce, 0x9c, 0x41, 0xc5, 0x03, 0x98, 0x14);
		
		/// <summary>
		/// Storage for CollectionType
		/// </summary>
		private global::System.String collectionTypePropertyStorage = "System.Collections.Generic.List<T>";
		
		/// <summary>
		/// Gets or sets the value of CollectionType domain property.
		/// Collection type of the domain entity collection.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainEntityCollection_CollectionType_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/CollectionType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/CollectionType.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/CollectionType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("System.Collections.Generic.List<T>")]
		[DslModeling::DomainObjectId("21cd8b6a-768b-4eb3-a1ce-9c41c5039814")]
		public global::System.String CollectionType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return collectionTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CollectionTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityCollection.CollectionType domain property.
		/// </summary>
		internal sealed partial class CollectionTypePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityCollection, global::System.String>
		{
			private CollectionTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityCollection.CollectionType domain property value handler.
			/// </summary>
			public static readonly CollectionTypePropertyHandler Instance = new CollectionTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityCollection.CollectionType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CollectionTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.collectionTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.collectionTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DomainEntityType domain property code
		
		/// <summary>
		/// DomainEntityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DomainEntityTypeDomainPropertyId = new global::System.Guid(0xd0c21d4a, 0xd742, 0x43d2, 0xbf, 0x4f, 0xa5, 0xd0, 0x63, 0xaf, 0xaf, 0x2e);
		
		/// <summary>
		/// Storage for DomainEntityType
		/// </summary>
		private global::System.String domainEntityTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DomainEntityType domain property.
		/// Domain entity type of the domain entity collection.
		/// </summary>
		[System.ComponentModel.TypeConverter("Eleven.VS.Templates.Ado.Dsl.DomainTypes.DomainEntityType_TypeConverter")]
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/DomainEntityType.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/DomainEntityType.Category", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/DomainEntityType.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d0c21d4a-d742-43d2-bf4f-a5d063afaf2e")]
		public global::System.String DomainEntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return domainEntityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DomainEntityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityCollection.DomainEntityType domain property.
		/// </summary>
		internal sealed partial class DomainEntityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityCollection, global::System.String>
		{
			private DomainEntityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityCollection.DomainEntityType domain property value handler.
			/// </summary>
			public static readonly DomainEntityTypePropertyHandler Instance = new DomainEntityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityCollection.DomainEntityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DomainEntityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.domainEntityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.domainEntityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdDomainEntityCollection domain property code
		
		/// <summary>
		/// IdDomainEntityCollection domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdDomainEntityCollectionDomainPropertyId = new global::System.Guid(0x389c93d2, 0x0f00, 0x440e, 0xb5, 0x77, 0x43, 0x46, 0xdb, 0xe1, 0xbf, 0xfb);
		
		/// <summary>
		/// Storage for IdDomainEntityCollection
		/// </summary>
		private global::System.String idDomainEntityCollectionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of IdDomainEntityCollection domain property.
		/// Description for Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection.Id Domain
		/// Entity Collection
		/// </summary>
		[DslDesign::DisplayNameResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/IdDomainEntityCollection.DisplayName", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Eleven.VS.Templates.Ado.Dsl.DomainEntityCollection/IdDomainEntityCollection.Description", typeof(global::Eleven.VS.Templates.Ado.Dsl.ElevenEntityModelDomainModel), "Eleven.VS.Templates.Ado.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("389c93d2-0f00-440e-b577-4346dbe1bffb")]
		public global::System.String IdDomainEntityCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idDomainEntityCollectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdDomainEntityCollectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEntityCollection.IdDomainEntityCollection domain property.
		/// </summary>
		internal sealed partial class IdDomainEntityCollectionPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEntityCollection, global::System.String>
		{
			private IdDomainEntityCollectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEntityCollection.IdDomainEntityCollection domain property value handler.
			/// </summary>
			public static readonly IdDomainEntityCollectionPropertyHandler Instance = new IdDomainEntityCollectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEntityCollection.IdDomainEntityCollection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdDomainEntityCollectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEntityCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idDomainEntityCollectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEntityCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idDomainEntityCollectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DomainEntityModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainEntityModel.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityCollection
		/// </summary>
		public virtual DomainEntityModel DomainEntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityCollectionDomainRoleId) as DomainEntityModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityModelHasDomainEntityCollections.DomainEntityCollectionDomainRoleId, value);
			}
		}
		#endregion
		#region DomainEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainEntity.
		/// Description for
		/// Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityCollection
		/// </summary>
		public virtual DomainEntity DomainEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityCollectionDomainRoleId) as DomainEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Eleven.VS.Templates.Ado.Dsl.DomainEntityReferencesDomainEntityCollections.DomainEntityCollectionDomainRoleId, value);
			}
		}
		#endregion
	}
}
